# Real-time Monitoring Dashboard for Astra
# This script reads from a log file generated by the backend and displays metrics.

import streamlit as st
import pandas as pd
import time
import os

# --- Page Configuration ---
st.set_page_config(
    page_title="Astra Watchdog Dashboard",
    page_icon="🛡️",
    layout="wide"
)

# --- Configuration ---
LOG_FILE_PATH = "../logs/api_log.csv"

# --- Helper Functions ---
def load_log_data():
    """Loads and preprocesses the log data from the CSV file."""
    if os.path.exists(LOG_FILE_PATH):
        try:
            return pd.read_csv(LOG_FILE_PATH)
        except pd.errors.EmptyDataError:
            return pd.DataFrame()
    return pd.DataFrame()

# --- Main Dashboard UI ---
st.title("🛡️ Astra Watchdog Dashboard")
st.caption("Live monitoring of predictions logged by the backend API.")

st.info(
    "For this dashboard to update, ensure the `backend.py` and `simulation.py` scripts are running."
)

# --- Placeholders for Live Metrics ---
col1, col2, col3, col4 = st.columns(4)
total_requests_placeholder = col1.empty()
bots_detected_placeholder = col2.empty()
human_sessions_placeholder = col3.empty()
bot_percentage_placeholder = col4.empty()

# --- Placeholder for Live Session Log ---
st.subheader("Live Prediction Log")
log_placeholder = st.empty()

# --- Main Application Loop ---
while True:
    log_df = load_log_data()

    if not log_df.empty:
        # Sort by timestamp to show the latest entries first
        log_df['Timestamp'] = pd.to_datetime(log_df['Timestamp'])
        log_df = log_df.sort_values(by="Timestamp", ascending=False)
        
        # --- Calculate Metrics ---
        total_requests = len(log_df)
        bots_detected = log_df[log_df['decision'] == 'BLOCK'].shape[0]
        humans_allowed = total_requests - bots_detected
        bot_percentage = (bots_detected / total_requests) * 100 if total_requests > 0 else 0
        
        # --- Update Metric Placeholders ---
        total_requests_placeholder.metric("Total Requests", f"{total_requests:,}")
        bots_detected_placeholder.metric("Bots Detected", f"{bots_detected:,}")
        human_sessions_placeholder.metric("Humans Allowed", f"{humans_allowed:,}")
        bot_percentage_placeholder.metric("Bot Traffic %", f"{bot_percentage:.1f}%")
        
        # --- Format Log Table for Display ---
        display_df = log_df.copy().head(20) # Show latest 20
        display_df['Timestamp'] = display_df['Timestamp'].dt.strftime('%H:%M:%S')
        display_df['Prediction'] = display_df['is_bot'].apply(lambda x: "🤖 Bot" if x == 1 else "👤 Human")
        display_df['Decision'] = display_df['decision'].apply(lambda x: "🚨 BLOCK" if x == 'BLOCK' else "✅ ALLOW")
        display_df['Confidence'] = display_df['confidence_score'].apply(lambda x: f"{x:.2%}")

        # Select and rename columns for a clean view
        display_df_final = display_df[[
            "Timestamp", "Prediction", "Confidence", "Decision", "form_fill_duration", "mouse_movements", "account_age_days"
        ]]
        display_df_final = display_df_final.rename(columns={
            "form_fill_duration": "Form Fill (s)",
            "mouse_movements": "Mouse Events",
            "account_age_days": "Acct. Age (d)"
        })

        log_placeholder.dataframe(display_df_final, use_container_width=True, hide_index=True)
    else:
        log_placeholder.info("No prediction logs found in `logs/api_log.csv`. Waiting for data...")

    # Refresh every 2 seconds
    time.sleep(2)
